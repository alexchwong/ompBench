// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// idxstats_hts
int idxstats_hts(std::string bam_path, int n_threads_to_use, bool verbose);
RcppExport SEXP _ompBench_idxstats_hts(SEXP bam_pathSEXP, SEXP n_threads_to_useSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bam_path(bam_pathSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads_to_use(n_threads_to_useSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(idxstats_hts(bam_path, n_threads_to_use, verbose));
    return rcpp_result_gen;
END_RCPP
}
// idxstats_hts_omp
int idxstats_hts_omp(std::string bam_path, int n_threads_to_use, bool verbose);
RcppExport SEXP _ompBench_idxstats_hts_omp(SEXP bam_pathSEXP, SEXP n_threads_to_useSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bam_path(bam_pathSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads_to_use(n_threads_to_useSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(idxstats_hts_omp(bam_path, n_threads_to_use, verbose));
    return rcpp_result_gen;
END_RCPP
}
// idxstats_pbam
int idxstats_pbam(std::string bam_file, int n_threads_to_use, bool verbose);
RcppExport SEXP _ompBench_idxstats_pbam(SEXP bam_fileSEXP, SEXP n_threads_to_useSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bam_file(bam_fileSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads_to_use(n_threads_to_useSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(idxstats_pbam(bam_file, n_threads_to_use, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ompBench_idxstats_hts", (DL_FUNC) &_ompBench_idxstats_hts, 3},
    {"_ompBench_idxstats_hts_omp", (DL_FUNC) &_ompBench_idxstats_hts_omp, 3},
    {"_ompBench_idxstats_pbam", (DL_FUNC) &_ompBench_idxstats_pbam, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ompBench(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
